name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  # Container Security Scan
  container-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t k8s-waf:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'k8s-waf:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency Security Scan
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on repository
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy FS scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # SAST with CodeQL
  sast:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python, shell

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Kubernetes Manifest Security Scan
  k8s-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Checkov
        run: |
          pip install checkov

      - name: Run Checkov on Kubernetes manifests
        run: |
          checkov -d charts/ --framework kubernetes --output sarif --output-file-path checkov-results.sarif

      - name: Upload Checkov results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'checkov-results.sarif'

  # Helm Security Scan
  helm-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Install Helm Security Plugin
        run: |
          helm plugin install https://github.com/helm/helm-secrets
          helm plugin install https://github.com/helm/helm-diff

      - name: Lint Helm charts
        run: |
          helm lint charts/waf/

      - name: Validate Helm chart
        run: |
          helm template test charts/waf/ > /dev/null

  # OWASP ZAP Security Scan
  zap-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start target application
        run: |
          # Start a test application for scanning
          docker run -d --name test-app -p 8080:80 nginx:alpine

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'zap-report.sarif'

  # Security Policy Check
  security-policy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file is missing"
            exit 1
          fi
          echo "✅ SECURITY.md file found"

      - name: Check for vulnerability disclosure policy
        run: |
          if ! grep -q "vulnerability\|security" SECURITY.md; then
            echo "❌ SECURITY.md should contain vulnerability disclosure information"
            exit 1
          fi
          echo "✅ Vulnerability disclosure policy found"

  # License Compliance Check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for license file
        run: |
          if [ ! -f "LICENSE" ]; then
            echo "❌ LICENSE file is missing"
            exit 1
          fi
          echo "✅ LICENSE file found"

      - name: Check license compatibility
        run: |
          # Check if license is compatible with common open source licenses
          if grep -q "MIT\|Apache\|GPL\|BSD" LICENSE; then
            echo "✅ Compatible license found"
          else
            echo "⚠️  License compatibility should be verified"
          fi

  # Security Headers Check
  security-headers:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install securityheaders.com CLI
        run: |
          npm install -g securityheaders

      - name: Check security headers in NGINX config
        run: |
          # Check if security headers are properly configured
          if grep -q "X-Frame-Options\|X-Content-Type-Options\|X-XSS-Protection" charts/waf/templates/configmap.yaml; then
            echo "✅ Security headers found in NGINX configuration"
          else
            echo "❌ Security headers missing from NGINX configuration"
            exit 1
          fi

  # Dependency Update Check
  dependency-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for outdated dependencies
        run: |
          # Check Docker base images
          if grep -q "nginx:1.24" Dockerfile; then
            echo "✅ Using recent NGINX version"
          else
            echo "⚠️  Consider updating NGINX base image"
          fi

          # Check Helm chart dependencies
          if [ -f "charts/waf/Chart.yaml" ]; then
            echo "✅ Helm chart found"
          else
            echo "❌ Helm chart missing"
            exit 1
          fi

  # Security Documentation Check
  security-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security documentation
        run: |
          # Check for security-related documentation
          docs=("SECURITY.md" "docs/SECURITY.md" "docs/ADVANCED.md")
          found=0
          
          for doc in "${docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ Found security documentation: $doc"
              found=1
            fi
          done
          
          if [ $found -eq 0 ]; then
            echo "❌ No security documentation found"
            exit 1
          fi

  # Compliance Check
  compliance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for compliance documentation
        run: |
          # Check for compliance-related files
          compliance_files=("COMPLIANCE.md" "docs/COMPLIANCE.md" "README.md")
          
          for file in "${compliance_files[@]}"; do
            if [ -f "$file" ]; then
              if grep -q "PCI\|SOC\|ISO\|GDPR" "$file"; then
                echo "✅ Compliance information found in $file"
              fi
            fi
          done

  # Final Security Report
  security-report:
    runs-on: ubuntu-latest
    needs: [container-scan, dependency-scan, sast, k8s-security, helm-security, security-policy, license-check, security-headers, dependency-update, security-docs, compliance]
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Completed Scans:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SAST (CodeQL)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Kubernetes Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Helm Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Policy Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ License Compliance Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Headers Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency Update Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Documentation Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Compliance Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security scan results in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any high/critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies if needed" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider implementing additional security measures" >> $GITHUB_STEP_SUMMARY 