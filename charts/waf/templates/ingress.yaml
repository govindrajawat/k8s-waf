{{- if .Values.waf.ingress.enabled -}}
{{- $fullName := include "waf.fullname" . -}}
{{- $svcPort := .Values.waf.service.port -}}
{{- if and .Values.waf.tls.enabled .Values.waf.ingress.annotations -}}
{{- $svcPort = .Values.waf.serviceHttps.port -}}
{{- end -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "waf.labels" . | nindent 4 }}
  {{- with .Values.waf.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
    # WAF-specific annotations
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine {{ .Values.waf.modsecurity.engine }}
      SecAuditEngine RelevantOnly
      SecAuditLogParts {{ .Values.waf.modsecurity.auditLog.parts }}
      SecAuditLogType Serial
      SecAuditLog /var/log/modsecurity/audit.log
      SecAuditLogStorageDir /var/log/modsecurity/audit/
      SecDebugLog /var/log/modsecurity/debug.log
      SecDebugLogLevel {{ .Values.waf.modsecurity.debugLog.level }}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      modsecurity_rules_file /etc/nginx/modsecurity/main.conf;
      {{- if .Values.waf.rateLimit.enabled }}
      limit_req_zone $binary_remote_addr zone={{ .Values.waf.rateLimit.zone }}:10m rate={{ .Values.waf.rateLimit.requests }}r/{{ .Values.waf.rateLimit.window }};
      limit_req zone={{ .Values.waf.rateLimit.zone }} burst={{ .Values.waf.rateLimit.burst }} nodelay;
      {{- end }}
      {{- if .Values.waf.security.securityHeaders.enabled }}
      add_header X-Frame-Options "{{ .Values.waf.security.securityHeaders.xFrameOptions }}" always;
      add_header X-Content-Type-Options "{{ .Values.waf.security.securityHeaders.xContentTypeOptions }}" always;
      add_header X-XSS-Protection "{{ .Values.waf.security.securityHeaders.xXSSProtection }}" always;
      add_header Strict-Transport-Security "{{ .Values.waf.security.securityHeaders.strictTransportSecurity }}" always;
      add_header Content-Security-Policy "{{ .Values.waf.security.securityHeaders.contentSecurityPolicy }}" always;
      add_header Referrer-Policy "{{ .Values.waf.security.securityHeaders.referrerPolicy }}" always;
      add_header Permissions-Policy "{{ .Values.waf.security.securityHeaders.permissionsPolicy }}" always;
      {{- end }}
      {{- if .Values.waf.security.botProtection.enabled }}
      if ($http_user_agent ~* "{{ join "|" .Values.waf.security.botProtection.userAgents }}") {
          return 403;
      }
      {{- end }}
      {{- if .Values.waf.security.ddosProtection.enabled }}
      limit_conn_zone $binary_remote_addr zone=ddos:10m;
      limit_conn ddos {{ .Values.waf.security.ddosProtection.maxConnections }};
      {{- end }}
    {{- if .Values.waf.security.whitelistIps }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ join "," .Values.waf.security.whitelistIps }}
    {{- end }}
    {{- if .Values.waf.security.blacklistIps }}
    nginx.ingress.kubernetes.io/deny-source-range: {{ join "," .Values.waf.security.blacklistIps }}
    {{- end }}
    {{- if .Values.monitoring.enabled }}
    prometheus.io/scrape: "true"
    prometheus.io/port: "9113"
    prometheus.io/path: "/metrics"
    {{- end }}
  {{- end }}
spec:
  {{- if .Values.waf.ingress.className }}
  ingressClassName: {{ .Values.waf.ingress.className }}
  {{- end }}
  {{- if .Values.waf.tls.enabled }}
  tls:
    {{- range .Values.waf.ingress.tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- end }}
  rules:
    {{- range .Values.waf.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            {{- if .pathType }}
            pathType: {{ .pathType }}
            {{- end }}
            backend:
              service:
                name: {{ $fullName }}
                port:
                  number: {{ $svcPort }}
          {{- end }}
    {{- end }}
{{- end }}