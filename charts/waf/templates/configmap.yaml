apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-nginx-config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    
    events {
      worker_connections 1024;
    }
    
    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;
      
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
      
      access_log /var/log/nginx/access.log main;
      error_log /var/log/nginx/error.log warn;
      
      sendfile on;
      keepalive_timeout 65;
      
      # Rate limiting
      limit_req_zone $binary_remote_addr zone=ratelimit:{{ .Values.proxy.rateLimiting.zoneSize }} rate={{ .Values.proxy.rateLimiting.rate }};
      
      # ModSecurity configuration
      modsecurity on;
      modsecurity_rules_file /etc/nginx/modsecurity.d/modsecurity.conf;
      
      server {
        listen 80 default_server;
        server_name _;
        
        {{- if .Values.tls.enabled }}
        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
        {{- else }}
        location / {
          limit_req zone=ratelimit burst={{ .Values.proxy.rateLimiting.burst }} nodelay;
          proxy_pass {{ .Values.proxy.backendService }};
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        {{- end }}
      }
      
      {{- if .Values.tls.enabled }}
      server {
        listen 443 ssl http2;
        server_name _;
        
        ssl_certificate /etc/letsencrypt/live/{{ .Values.tls.certManager.secretName }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ .Values.tls.certManager.secretName }}/privkey.pem;
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        location / {
          limit_req zone=ratelimit burst={{ .Values.proxy.rateLimiting.burst }} nodelay;
          proxy_pass {{ .Values.proxy.backendService }};
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          # Security headers
          add_header X-Frame-Options "SAMEORIGIN";
          add_header X-Content-Type-Options "nosniff";
          add_header X-XSS-Protection "1; mode=block";
          add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'self'; form-action 'self';";
          add_header Referrer-Policy "strict-origin-when-cross-origin";
          add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        }
        
        location /healthz {
          access_log off;
          return 200 "healthy\n";
        }
        
        {{- if .Values.monitoring.prometheus.enabled }}
        location {{ .Values.monitoring.prometheus.path }} {
          stub_status on;
          access_log off;
        }
        {{- end }}
      }
      {{- end }}
    }