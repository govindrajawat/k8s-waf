apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-nginx-config
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  nginx.conf: |
    user www-data;
    worker_processes {{ .Values.waf.nginx.workerProcesses }};
    pid /var/run/nginx.pid;
    
    # Security: Hide NGINX version
    server_tokens off;
    
    # Performance tuning
    worker_rlimit_nofile {{ .Values.waf.nginx.workerRlimitNofile }};
    worker_connections {{ .Values.waf.nginx.workerConnections }};
    use epoll;
    multi_accept on;
    
    # Logging
    error_log /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log combined buffer=512k flush=1m;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;
    
    # IP whitelist/blacklist
    geo $bad_bot {
        default 0;
        # Add known bad bot IPs here
        192.168.1.100 1;
    }
    
    geo $whitelist {
        default 0;
        # Add whitelisted IPs here
        10.0.0.0/8 1;
        172.16.0.0/12 1;
        192.168.0.0/16 1;
    }
    
    # Events
    events {
        worker_connections {{ .Values.waf.nginx.workerConnections }};
        use epoll;
        multi_accept on;
    }
    
    # HTTP configuration
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self';" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        
        # Performance settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout {{ .Values.waf.nginx.keepaliveTimeout }};
        types_hash_max_size 2048;
        client_max_body_size {{ .Values.waf.nginx.clientMaxBodySize }};
        client_body_buffer_size {{ .Values.waf.nginx.clientBodyBufferSize }};
        client_header_buffer_size {{ .Values.waf.nginx.clientHeaderBufferSize }};
        large_client_header_buffers {{ .Values.waf.nginx.largeClientHeaderBuffers }};
        output_buffers 1 32k;
        postpone_output 1460;
        
        # Gzip compression
        {{- if .Values.waf.nginx.gzip.enabled }}
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level {{ .Values.waf.nginx.gzip.level }};
        gzip_types
            {{- range .Values.waf.nginx.gzip.types }}
            {{ . }}
            {{- end }};
        {{- end }}
        
        # Logging format
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            'modsec_status="$modsec_status" '
                            'modsec_rule_id="$modsec_rule_id" '
                            'modsec_rule_msg="$modsec_rule_msg"';
        
        # Upstream backend servers
        upstream backend {
            least_conn;
            server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        # Health check endpoint
        server {
            listen 8080;
            server_name _;
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /metrics {
                stub_status on;
                access_log off;
            }
        }
        
        # HTTP to HTTPS redirect
        server {
            listen 80;
            server_name _;
            return 301 https://$host$request_uri;
        }
        
        # HTTPS server
        server {
            listen 443 ssl http2;
            server_name _;
            
            # SSL configuration
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 10m;
            ssl_session_tickets off;
            ssl_stapling on;
            ssl_stapling_verify on;
            
            # Security: Hide server info
            server_tokens off;
            
            # ModSecurity configuration
            modsecurity on;
            modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;
            
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            
            # Block bad bots
            if ($bad_bot) {
                return 403;
            }
            
            # Whitelist bypass
            if ($whitelist) {
                set $skip_rate_limit 1;
            }
            
            # Main location
            location / {
                # Rate limiting (skip for whitelisted IPs)
                limit_req zone=general burst=20 nodelay;
                
                # Proxy to backend
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
                
                # Timeouts
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                
                # Buffering
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                
                # Security headers
                proxy_hide_header X-Powered-By;
                proxy_hide_header Server;
            }
            
            # API endpoints with stricter rate limiting
            location /api/ {
                limit_req zone=api burst=10 nodelay;
                
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Login endpoints with very strict rate limiting
            location ~ ^/(login|auth|signin) {
                limit_req zone=login burst=3 nodelay;
                
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Static files
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                proxy_pass http://backend;
            }
            
            # Deny access to sensitive files
            location ~ /\. {
                deny all;
            }
            
            location ~ \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
                deny all;
            }
            
            # Custom error pages
            error_page 403 /403.html;
            error_page 404 /404.html;
            error_page 500 502 503 504 /50x.html;
            
            location = /403.html {
                internal;
                return 403 '{"error": "Access Forbidden", "code": 403}';
                add_header Content-Type application/json;
            }
            
            location = /404.html {
                internal;
                return 404 '{"error": "Not Found", "code": 404}';
                add_header Content-Type application/json;
            }
            
            location = /50x.html {
                internal;
                return 500 '{"error": "Internal Server Error", "code": 500}';
                add_header Content-Type application/json;
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-nginx-sites
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  default.conf: |
    # Default server configuration
    # This file serves as a template for application-specific configurations
    
    server {
        listen 80;
        server_name _;
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # ModSecurity
        modsecurity on;
        modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;
        
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        
        # Main location block
        location / {
            # Proxy to backend application
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Security
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint
        location /metrics {
            stub_status on;
            access_log off;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-modsecurity-config
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  modsecurity.conf: |
    # ModSecurity Configuration for Kubernetes WAF
    # Based on OWASP CRS 3.3
    
    # Include the main ModSecurity configuration
    Include /etc/nginx/modsecurity/modsecurity.conf
    
    # Include the OWASP CRS setup
    Include /etc/nginx/modsecurity/crs-setup.conf
    
    # Include the OWASP CRS rules
    Include /etc/nginx/modsecurity/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-901-INITIALIZATION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9003-NEXTCLOUD-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9004-DOKUWIKI-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9005-CPANEL-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9006-XENFORO-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9007-PHPBB-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9008-MYBB-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9009-MEDIAWIKI-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9010-OPENCART-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9011-PRESTASHOP-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9012-LARAVEL-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9013-SYMFONY-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9014-ARTICULO-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9015-REQUESTID-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9016-ADOBE-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9017-APACHE-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9018-PHP-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9019-ENGLISH-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9020-LIBRATO-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9021-STACKPATH-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9022-SUCCESSFUL-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9023-IGNORE-SCAN-SIGNATURE.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9024-IGNORE-SCRIPT-KIDDIES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9025-IGNORE-PROBING.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9026-IGNORE-COMMON-ATTACKS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-905-COMMON-EXCLUSIONS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-910-IP-REPUTATION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-911-METHOD-ENFORCEMENT.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-912-DOS-PROTECTION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-913-SCANNER-DETECTION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-921-PROTOCOL-ATTACK.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-931-APPLICATION-ATTACK-RFI.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-933-APPLICATION-ATTACK-PHP.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-934-APPLICATION-ATTACK-NODEJS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-944-APPLICATION-ATTACK-JAVA.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-949-BLOCKING-EVALUATION.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-950-DATA-LEAKAGES.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-951-DATA-LEAKAGES-SQL.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-952-DATA-LEAKAGES-JAVA.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-953-DATA-LEAKAGES-PHP.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-954-DATA-LEAKAGES-IIS.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-959-BLOCKING-EVALUATION.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-980-CORRELATION.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
    
    # Custom rules for Kubernetes environment
    Include /etc/nginx/modsecurity/rules/custom-rules.conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-modsecurity-rules
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  crs-setup.conf: |
    # OWASP CRS Setup Configuration (Minimal Example)
    # For full options, see the official CRS documentation
    
    # Enable ModSecurity rule engine
    SecRuleEngine On
    
    # Set default action to block and log
    SecDefaultAction "phase:1,log,auditlog,deny,status:403"
    SecDefaultAction "phase:2,log,auditlog,deny,status:403"
    
    # Set anomaly scoring thresholds
    SecAction "id:900110,phase:1,nolog,pass,t:none,setvar:tx.inbound_anomaly_score_threshold=5"
    SecAction "id:900120,phase:1,nolog,pass,t:none,setvar:tx.outbound_anomaly_score_threshold=4"
    
    # Set paranoia level (1-4, higher is stricter)
    SecAction "id:900000,phase:1,nolog,pass,t:none,setvar:tx.paranoia_level=1"
    
    # Enable/disable certain CRS features
    SecAction "id:900130,phase:1,nolog,pass,t:none,setvar:tx.crs_exclusions_wordpress=1"
    SecAction "id:900140,phase:1,nolog,pass,t:none,setvar:tx.crs_exclusions_drupal=0"
    
    # Allow request body access
    SecRequestBodyAccess On
    SecResponseBodyAccess Off
    
    # Set request body limits
    SecRequestBodyLimit 13107200
    SecRequestBodyNoFilesLimit 131072
    SecRequestBodyInMemoryLimit 131072
    
    # Set file upload limits
    SecUploadFileLimit 10
    SecUploadFileMode 0600
    
    # Set audit log parts
    SecAuditLogParts ABIJDEFHZ
    
    # Set the default blocking action for rules that status with custom message
    SecDefaultAction "phase:1,log,auditlog,status:403,msg:'Access Denied'"
    SecDefaultAction "phase:2,log,auditlog,status:403,msg:'Access Denied'"
    
  custom-rules.conf: |
    # Custom ModSecurity rules
    {{- range .Values.waf.security.customRules }}
    {{ . }}
    {{- end }}
    
    # Rate limiting rules
    {{- if .Values.waf.rateLimit.enabled }}
    SecRule &RATE_LIMIT "@gt 0" \
        "id:1000,\
        phase:1,\
        block,\
        msg:'Rate limit exceeded',\
        logdata:'Rate limit: %{RATE_LIMIT}'"
    {{- end }}
    
    # Bot detection rules
    {{- if .Values.waf.security.botProtection.enabled }}
    SecRule REQUEST_HEADERS:User-Agent "@pm {{ join " " .Values.waf.security.botProtection.userAgents }}" \
        "id:1001,\
        phase:1,\
        block,\
        msg:'Bot detected',\
        logdata:'User-Agent: %{MATCHED_VAR}'"
    {{- end }}
    
    # DDoS protection rules
    {{- if .Values.waf.security.ddosProtection.enabled }}
    SecRule &CONNECTION_COUNT "@gt {{ .Values.waf.security.ddosProtection.maxConnections }}" \
        "id:1002,\
        phase:1,\
        block,\
        msg:'DDoS attack detected',\
        logdata:'Connections: %{CONNECTION_COUNT}'"
    {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-fail2ban-config
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  jail.local: |
    [nginx-http-auth]
    enabled = true
    port    = http,https
    filter  = nginx-http-auth
    logpath = /var/log/nginx/error.log
    maxretry = {{ .Values.waf.security.fail2ban.maxRetry }}
    bantime = {{ .Values.waf.security.fail2ban.bantime }}
    findtime = {{ .Values.waf.security.fail2ban.findtime }}
    
    [nginx-botsearch]
    enabled = true
    port    = http,https
    filter  = nginx-botsearch
    logpath = /var/log/nginx/access.log
    maxretry = 2
    bantime = 3600
    findtime = 600
    
    [nginx-req-limit]
    enabled = true
    port    = http,https
    filter  = nginx-req-limit
    logpath = /var/log/nginx/error.log
    maxretry = 3
    bantime = 1800
    findtime = 300
    
  nginx-http-auth.conf: |
    [Definition]
    failregex = limiting requests, excess:.* by zone.*client: <HOST>
    ignoreregex =
    
  nginx-botsearch.conf: |
    [Definition]
    failregex = ^<HOST> .* "(GET|POST|HEAD) .* HTTP/[0-9.]+" 404 .*$
    ignoreregex =
    
  nginx-req-limit.conf: |
    [Definition]
    failregex = limiting requests, excess:.* by zone.*client: <HOST>
    ignoreregex =
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-wazuh-config
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  ossec.conf: |
    <ossec_config>
      <client>
        <server>
          <address>{{ .Values.waf.security.wazuh.endpoint }}</address>
          <protocol>{{ .Values.waf.security.wazuh.protocol }}</protocol>
        </server>
        <config-profile>ubuntu, ubuntu20, ubuntu20.04</config-profile>
      </client>
      
      <localfile>
        <log_format>syslog</log_format>
        <location>/var/log/nginx/access.log</location>
      </localfile>
      
      <localfile>
        <log_format>syslog</log_format>
        <location>/var/log/nginx/error.log</location>
      </localfile>
      
      <localfile>
        <log_format>syslog</log_format>
        <location>/var/log/modsecurity/audit.log</location>
      </localfile>
    </ossec_config>