apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-nginx-config
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  nginx.conf: |
    user nginx;
    worker_processes {{ .Values.waf.nginx.workerProcesses }};
    worker_rlimit_nofile {{ .Values.waf.nginx.workerRlimitNofile }};
    
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections {{ .Values.waf.nginx.workerConnections }};
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        log_format json escape=json '{'
            '"time_local":"$time_local",'
            '"remote_addr":"$remote_addr",'
            '"remote_user":"$remote_user",'
            '"request":"$request",'
            '"status": "$status",'
            '"body_bytes_sent":"$body_bytes_sent",'
            '"request_time":"$request_time",'
            '"http_referrer":"$http_referer",'
            '"http_user_agent":"$http_user_agent",'
            '"http_x_forwarded_for":"$http_x_forwarded_for"'
        '}';
        
        access_log /var/log/nginx/access.log json;
        
        # Basic settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout {{ .Values.waf.nginx.keepaliveTimeout }};
        types_hash_max_size 2048;
        server_tokens off;
        
        # Buffer sizes
        client_max_body_size {{ .Values.waf.nginx.clientMaxBodySize }};
        client_body_buffer_size {{ .Values.waf.nginx.clientBodyBufferSize }};
        client_header_buffer_size {{ .Values.waf.nginx.clientHeaderBufferSize }};
        large_client_header_buffers {{ .Values.waf.nginx.largeClientHeaderBuffers }};
        
        # Timeouts
        client_header_timeout {{ .Values.waf.nginx.clientHeaderTimeout }}s;
        client_body_timeout {{ .Values.waf.nginx.clientBodyTimeout }}s;
        send_timeout {{ .Values.waf.nginx.sendTimeout }}s;
        
        # Gzip compression
        {{- if .Values.waf.nginx.gzip.enabled }}
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level {{ .Values.waf.nginx.gzip.level }};
        gzip_types
            {{- range .Values.waf.nginx.gzip.types }}
            {{ . }}
            {{- end }};
        {{- end }}
        
        # Rate limiting
        {{- if .Values.waf.rateLimit.enabled }}
        limit_req_zone $binary_remote_addr zone={{ .Values.waf.rateLimit.zone }}:10m rate={{ .Values.waf.rateLimit.requests }}r/{{ .Values.waf.rateLimit.window }};
        {{- end }}
        
        # DDoS protection
        {{- if .Values.waf.security.ddosProtection.enabled }}
        limit_conn_zone $binary_remote_addr zone=ddos:10m;
        {{- end }}
        
        # ModSecurity
        modsecurity on;
        modsecurity_rules_file /etc/nginx/modsecurity/main.conf;
        
        # Include server configurations
        include /etc/nginx/conf.d/*.conf;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-nginx-sites
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  default.conf: |
    # Health check endpoints
    location /healthz {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    location /readyz {
        access_log off;
        return 200 "ready\n";
        add_header Content-Type text/plain;
    }
    
    location /startupz {
        access_log off;
        return 200 "started\n";
        add_header Content-Type text/plain;
    }
    
    # NGINX status for monitoring
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    # Main server block
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Security headers
        {{- if .Values.waf.security.securityHeaders.enabled }}
        add_header X-Frame-Options "{{ .Values.waf.security.securityHeaders.xFrameOptions }}" always;
        add_header X-Content-Type-Options "{{ .Values.waf.security.securityHeaders.xContentTypeOptions }}" always;
        add_header X-XSS-Protection "{{ .Values.waf.security.securityHeaders.xXSSProtection }}" always;
        add_header Strict-Transport-Security "{{ .Values.waf.security.securityHeaders.strictTransportSecurity }}" always;
        add_header Content-Security-Policy "{{ .Values.waf.security.securityHeaders.contentSecurityPolicy }}" always;
        add_header Referrer-Policy "{{ .Values.waf.security.securityHeaders.referrerPolicy }}" always;
        add_header Permissions-Policy "{{ .Values.waf.security.securityHeaders.permissionsPolicy }}" always;
        {{- end }}
        
        # Rate limiting
        {{- if .Values.waf.rateLimit.enabled }}
        limit_req zone={{ .Values.waf.rateLimit.zone }} burst={{ .Values.waf.rateLimit.burst }} nodelay;
        {{- end }}
        
        # DDoS protection
        {{- if .Values.waf.security.ddosProtection.enabled }}
        limit_conn ddos {{ .Values.waf.security.ddosProtection.maxConnections }};
        {{- end }}
        
        # Bot protection
        {{- if .Values.waf.security.botProtection.enabled }}
        if ($http_user_agent ~* "{{ join "|" .Values.waf.security.botProtection.userAgents }}") {
            return 403;
        }
        {{- end }}
        
        # IP whitelist/blacklist
        {{- if .Values.waf.security.whitelistIps }}
        allow {{ join ";" .Values.waf.security.whitelistIps }};
        deny all;
        {{- end }}
        
        {{- if .Values.waf.security.blacklistIps }}
        deny {{ join ";" .Values.waf.security.blacklistIps }};
        {{- end }}
        
        # Default location
        location / {
            proxy_pass http://backend-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Proxy timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Proxy buffers
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
    }
    
    {{- if .Values.waf.tls.enabled }}
    # HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name {{ join " " .Values.waf.tls.certificate.hosts }};
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers {{ join ":" .Values.waf.tls.cipherSuites }};
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers
        {{- if .Values.waf.security.securityHeaders.enabled }}
        add_header X-Frame-Options "{{ .Values.waf.security.securityHeaders.xFrameOptions }}" always;
        add_header X-Content-Type-Options "{{ .Values.waf.security.securityHeaders.xContentTypeOptions }}" always;
        add_header X-XSS-Protection "{{ .Values.waf.security.securityHeaders.xXSSProtection }}" always;
        add_header Strict-Transport-Security "{{ .Values.waf.security.securityHeaders.strictTransportSecurity }}" always;
        add_header Content-Security-Policy "{{ .Values.waf.security.securityHeaders.contentSecurityPolicy }}" always;
        add_header Referrer-Policy "{{ .Values.waf.security.securityHeaders.referrerPolicy }}" always;
        add_header Permissions-Policy "{{ .Values.waf.security.securityHeaders.permissionsPolicy }}" always;
        {{- end }}
        
        # Rate limiting
        {{- if .Values.waf.rateLimit.enabled }}
        limit_req zone={{ .Values.waf.rateLimit.zone }} burst={{ .Values.waf.rateLimit.burst }} nodelay;
        {{- end }}
        
        # DDoS protection
        {{- if .Values.waf.security.ddosProtection.enabled }}
        limit_conn ddos {{ .Values.waf.security.ddosProtection.maxConnections }};
        {{- end }}
        
        # Bot protection
        {{- if .Values.waf.security.botProtection.enabled }}
        if ($http_user_agent ~* "{{ join "|" .Values.waf.security.botProtection.userAgents }}") {
            return 403;
        }
        {{- end }}
        
        # IP whitelist/blacklist
        {{- if .Values.waf.security.whitelistIps }}
        allow {{ join ";" .Values.waf.security.whitelistIps }};
        deny all;
        {{- end }}
        
        {{- if .Values.waf.security.blacklistIps }}
        deny {{ join ";" .Values.waf.security.blacklistIps }};
        {{- end }}
        
        # Default location
        location / {
            proxy_pass http://backend-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Proxy timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Proxy buffers
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
    }
    {{- end }}
    
    {{- if .Values.waf.nginx.customConfig }}
    # Custom configuration
    {{ .Values.waf.nginx.customConfig }}
    {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-modsecurity-config
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  main.conf: |
    # ModSecurity main configuration
    Include /etc/nginx/modsecurity/modsecurity.conf
    Include /etc/nginx/modsecurity/rules/*.conf
    
    # Custom rules
    {{- if .Values.waf.modsecurity.customRules }}
    {{ .Values.waf.modsecurity.customRules }}
    {{- end }}
    
  modsecurity.conf: |
    # ModSecurity configuration
    SecRuleEngine {{ .Values.waf.modsecurity.engine }}
    SecRuleInheritance On
    
    # Request body settings
    SecRequestBodyLimit {{ .Values.waf.modsecurity.requestBodyLimit }}
    SecRequestBodyNoFilesLimit {{ .Values.waf.modsecurity.requestBodyNoFilesLimit }}
    SecRequestBodyInMemoryLimit {{ .Values.waf.modsecurity.requestBodyInMemoryLimit }}
    SecRequestBodyAccess {{ .Values.waf.modsecurity.requestBodyAccess }}
    
    # Response body settings
    SecResponseBodyAccess {{ .Values.waf.modsecurity.responseBodyAccess }}
    SecResponseBodyLimit {{ .Values.waf.modsecurity.responseBodyLimit }}
    
    # Audit logging
    {{- if .Values.waf.modsecurity.auditLog.enabled }}
    SecAuditEngine RelevantOnly
    SecAuditLogParts {{ .Values.waf.modsecurity.auditLog.parts }}
    SecAuditLogType Serial
    SecAuditLog /var/log/modsecurity/audit.log
    SecAuditLogStorageDir /var/log/modsecurity/audit/
    SecAuditLogFormat {{ .Values.waf.modsecurity.auditLog.format }}
    {{- end }}
    
    # Debug logging
    {{- if .Values.waf.modsecurity.debugLog.enabled }}
    SecDebugLog /var/log/modsecurity/debug.log
    SecDebugLogLevel {{ .Values.waf.modsecurity.debugLog.level }}
    {{- end }}
    
    # Performance settings
    SecPcreMatchLimit 1000
    SecPcreMatchLimitRecursion 1000
    SecUnicodeMapFile /etc/nginx/modsecurity/unicode.mapping
    SecUnicodeCodePage 20127
    
    # Default actions
    SecDefaultAction "phase:1,log,auditlog,pass"
    SecDefaultAction "phase:2,log,auditlog,pass"
    
    # Include OWASP CRS
    {{- if .Values.waf.security.owaspRules }}
    Include /etc/nginx/modsecurity/rules/owasp-crs.conf
    {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "waf.fullname" . }}-modsecurity-rules
  labels:
    {{- include "waf.labels" . | nindent 4 }}
data:
  {{- if .Values.waf.security.owaspRules }}
  owasp-crs.conf: |
    # OWASP CRS {{ .Values.waf.security.crsVersion }} Configuration
    Include /etc/nginx/modsecurity/rules/crs-setup.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-901-INITIALIZATION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9003-NEXTCLOUD-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9004-DOKUWIKI-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9005-CPANEL-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-903.9006-XENFORO-EXCLUSION-RULES.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-905-COMMON-EXCLUSIONS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-910-IP-REPUTATION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-911-METHOD-ENFORCEMENT.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-912-DOS-PROTECTION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-913-SCANNER-DETECTION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-921-PROTOCOL-ATTACK.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-931-APPLICATION-ATTACK-RFI.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-933-APPLICATION-ATTACK-PHP.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-934-APPLICATION-ATTACK-NODEJS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-944-APPLICATION-ATTACK-JAVA.conf
    Include /etc/nginx/modsecurity/rules/REQUEST-949-BLOCKING-EVALUATION.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-950-DATA-LEAKAGES.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-951-DATA-LEAKAGES-SQL.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-952-DATA-LEAKAGES-JAVA.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-953-DATA-LEAKAGES-PHP.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-954-DATA-LEAKAGES-IIS.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-959-BLOCKING-EVALUATION.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-980-CORRELATION.conf
    Include /etc/nginx/modsecurity/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
  {{- end }}
  
  # Custom rules
  custom-rules.conf: |
    # Custom ModSecurity rules
    {{- range .Values.waf.security.customRules }}
    {{ . }}
    {{- end }}
    
    # Rate limiting rules
    {{- if .Values.waf.rateLimit.enabled }}
    SecRule &RATE_LIMIT "@gt 0" \
        "id:1000,\
        phase:1,\
        block,\
        msg:'Rate limit exceeded',\
        logdata:'Rate limit: %{RATE_LIMIT}'"
    {{- end }}
    
    # Bot detection rules
    {{- if .Values.waf.security.botProtection.enabled }}
    SecRule REQUEST_HEADERS:User-Agent "@pm {{ join " " .Values.waf.security.botProtection.userAgents }}" \
        "id:1001,\
        phase:1,\
        block,\
        msg:'Bot detected',\
        logdata:'User-Agent: %{MATCHED_VAR}'"
    {{- end }}
    
    # DDoS protection rules
    {{- if .Values.waf.security.ddosProtection.enabled }}
    SecRule &CONNECTION_COUNT "@gt {{ .Values.waf.security.ddosProtection.maxConnections }}" \
        "id:1002,\
        phase:1,\
        block,\
        msg:'DDoS attack detected',\
        logdata:'Connections: %{CONNECTION_COUNT}'"
    {{- end }}